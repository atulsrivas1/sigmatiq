-- AUTO-GENERATED seed for sc.workflows
BEGIN;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('breakout_pullback_scan_5m_v1', 1, 'published', 'Scan Breakout Pullbacks (10 minutes)', 'Find first pullbacks after real breakouts with volume support.', '"Get a ranked list of candidates using the Breakout Pullback set."'::jsonb, 'beginner', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001", "Watchlist or a universe preset"]'::jsonb, '{"indicators": ["donchian", "ema", "intraday_vwap", "vol_zscore"], "indicator_sets": ["breakout_pullback_v1"], "strategies": []}'::jsonb, '[{"description": "Evaluate the breakout pullback set at 5m timeframe.", "rationale": "Runs the components and returns matches with context.", "api": {"method": "POST", "path": "/indicator_sets/breakout_pullback_v1/evaluate", "body": {"universe": ["SPY", "AAPL"], "timeframe": "5m"}}, "expects": "ok:true and matches with reasons"}]'::jsonb, '["Ranked list: { symbol, ts, reason }"]'::jsonb, '["Post‑consolidation breakouts", "Liquid names"]'::jsonb, '["Low liquidity", "Broad chop"]'::jsonb, '["False breaks without volume"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/breakout_pullback_v1"}'::jsonb, TRUE, 'Scan for first pullbacks after real breakouts using a 5m preset.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('breakout_with_volume_scanner_v1', 1, 'published', 'Find Breakouts with Volume (10 minutes)', 'Use a preset indicator set to catch breakouts confirmed by volume.', '"Get a ranked list of breakout candidates using a 5m breakout preset."'::jsonb, 'day_trader', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001", "Watchlist or universe preset"]'::jsonb, '{"indicators": ["donchian", "macd", "vol_zscore", "obv"], "indicator_sets": ["momentum_breakout_v1"], "strategies": []}'::jsonb, '[{"description": "Load the ''Momentum Breakout'' set and review components.", "rationale": "Know what the scanner checks: range + trend + volume.", "api": {"method": "GET", "path": "/catalog/indicator_set/momentum_breakout_v1"}, "expects": "Components list and signal logic"}, {"description": "Evaluate the set on your universe at 5‑minute timeframe.", "rationale": "Runs all components and returns matches.", "api": {"method": "POST", "path": "/indicator_sets/momentum_breakout_v1/evaluate", "body": {"universe": ["SPY", "AAPL"], "timeframe": "5m"}}, "expects": "ok:true and matches with confidence"}]'::jsonb, '["Ranked list of breakout candidates"]'::jsonb, '["Post‑consolidation breakouts"]'::jsonb, '["Low liquidity, earnings day"]'::jsonb, '["Breakouts can fail; use stops"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/momentum_breakout_v1"}'::jsonb, TRUE, 'Use a preset indicator set to catch breakouts confirmed by volume.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('find_oversold_stocks_rsi_v1', 1, 'published', 'Find Oversold Stocks (5 minutes)', 'Use RSI to quickly surface oversold names on your watchlist.', '"Get a list of oversold candidates using hourly RSI < 30."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Watchlist of symbols"]'::jsonb, '{"indicators": ["rsi"], "indicator_sets": [], "strategies": []}'::jsonb, '[{"description": "Choose timeframe (hourly) and threshold (RSI < 30).", "rationale": "Larger intraday bars reduce noise for beginners.", "api": {"method": "POST", "path": "/screen", "body": {"universe": ["SPY", "AAPL"], "condition": {"id": "rsi", "params": {"period": 14}, "op": "<", "value": 30}, "timeframe": "hourly"}}, "expects": "ok:true and non-empty matches for symbols meeting the condition"}, {"description": "Save or export results for review.", "rationale": "Track changes day-to-day.", "api": {"method": "GET", "path": "/leaderboard?tag=screens", "query": {}}, "expects": "ok:true (optional)"}]'::jsonb, '["List of matches { symbol, ts, value }"]'::jsonb, '["Range-bound markets"]'::jsonb, '["Major news or low liquidity"]'::jsonb, '["RSI can stay oversold in strong downtrends"]'::jsonb, '{"indicator": "/catalog/indicator/rsi"}'::jsonb, TRUE, 'Use RSI to quickly surface oversold names on your watchlist.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('gate_0dte_entries_v1', 1, 'published', 'Gate 0DTE Entries (10 minutes)', 'Use a momentum and session preset to gate intraday options entries.', '"Enable entries only when conditions are favorable."'::jsonb, 'options_trader', 'intermediate', 10, ARRAY[]::text[], '["API at http://localhost:8001", "Intraday data", "IV access (optional)"]'::jsonb, '{"indicators": ["momentum_score_total", "first15m_range_z", "open_gap_z", "atr"], "indicator_sets": ["zerosigma_0dte_gate"], "strategies": ["0dte_scalping"]}'::jsonb, '[{"description": "Fetch gate preset and review thresholds.", "rationale": "Understand gating reasons.", "api": {"method": "GET", "path": "/catalog/indicator_set/zerosigma_0dte_gate"}, "expects": "Components and thresholds"}, {"description": "Evaluate gate live with throttle (5s).", "rationale": "Stream updates during session.", "api": {"method": "WS", "path": "/ws/indicator_sets", "body": {"action": "subscribe", "set_id": "zerosigma_0dte_gate", "universe": ["SPY"], "timeframe": "5m", "throttle_ms": 5000}}, "expects": "match events with gate=green/yellow/red"}]'::jsonb, '["Gate status with reasons"]'::jsonb, '["Liquid underlyings during RTH"]'::jsonb, '["Halts, extreme gaps"]'::jsonb, '["Greeks/slippage not modeled here; use strategy policy"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/zerosigma_0dte_gate", "strategy": "/catalog/strategy/0dte_scalping"}'::jsonb, TRUE, 'Use a momentum and session preset to gate intraday options entries.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('keltner_channel_break_hourly_v1', 1, 'published', 'Keltner Channel Break (10 minutes)', 'Continuation trades on channel breaks with EMA alignment.', '"Scan hourly for Keltner breaks aligned with EMA trend."'::jsonb, 'beginner', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001"]'::jsonb, '{"indicators": ["keltner", "ema"], "indicator_sets": ["keltner_channel_trend_v1"], "strategies": ["keltner_channel_break"]}'::jsonb, '[{"description": "Evaluate Keltner trend set at hourly timeframe.", "rationale": "Confirm break and EMA alignment.", "api": {"method": "POST", "path": "/indicator_sets/keltner_channel_trend_v1/evaluate", "body": {"universe": ["SPY", "AAPL"], "timeframe": "hourly"}}, "expects": "ok:true and break/alignment flags"}]'::jsonb, '["Candidates with channel break and EMA flags"]'::jsonb, '["Trending markets"]'::jsonb, '["Choppy ranges"]'::jsonb, '["Beware false breaks in low vol"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/keltner_channel_trend_v1", "strategy": "/catalog/strategy/keltner_channel_break"}'::jsonb, TRUE, 'Scan hourly for Keltner channel breaks aligned with EMA trend.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('macd_cross_alerts_hourly_v1', 1, 'published', 'MACD Cross Alerts (5 minutes)', 'Get notified when momentum flips on your watchlist.', '"Set hourly MACD cross alerts."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Watchlist or universe preset"]'::jsonb, '{"indicators": ["macd"], "indicator_sets": [], "strategies": []}'::jsonb, '[{"description": "Subscribe to MACD cross events via WebSocket.", "rationale": "Receive alerts as momentum flips.", "api": {"method": "WS", "path": "/ws/indicators", "body": {"action": "screen", "universe": ["SPY", "AAPL"], "condition": {"id": "macd", "params": {"fast": 12, "slow": 26, "signal": 9, "cross": "any"}}, "timeframe": "hourly", "throttle_ms": 60000}}, "expects": "match events with symbol and ts"}]'::jsonb, '["Alert stream of MACD crosses"]'::jsonb, '["Trending markets"]'::jsonb, '["Choppy ranges"]'::jsonb, '["Lagging by design; confirm with trend"]'::jsonb, '{"indicator": "/catalog/indicator/macd"}'::jsonb, TRUE, 'Set hourly MACD cross alerts to catch momentum shifts.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('mean_reversion_bands_hourly_v1', 1, 'published', 'Mean Reversion at Bands (10 minutes)', 'Fade band extremes only with oscillator turn.', '"Scan for band extremes with confirmation."'::jsonb, 'beginner', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001"]'::jsonb, '{"indicators": ["bollinger_bands", "rsi", "stoch_rsi"], "indicator_sets": ["mean_reversion_bands_v1"], "strategies": ["mean_reversion_bands"]}'::jsonb, '[{"description": "Evaluate mean-reversion bands at hourly timeframe.", "rationale": "Hourly reduces noise for beginners.", "api": {"method": "POST", "path": "/indicator_sets/mean_reversion_bands_v1/evaluate", "body": {"universe": ["SPY", "AAPL"], "timeframe": "hourly"}}, "expects": "ok:true and matches with reasons"}]'::jsonb, '["Candidates with band/oscillator flags"]'::jsonb, '["Range-bound conditions"]'::jsonb, '["Strong trends"]'::jsonb, '["Reversions can fail in trends"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/mean_reversion_bands_v1", "strategy": "/catalog/strategy/mean_reversion_bands"}'::jsonb, TRUE, 'Scan hourly for band extremes only when RSI/StochRSI turn.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('options_premium_review_daily_v1', 1, 'published', 'Options Premium Review (5 minutes)', 'See if premium is rich or cheap vs history.', '"Daily IV regime check with a simple recommendation."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Daily IV data access"]'::jsonb, '{"indicators": ["iv_rank_52w", "vix_term_slope"], "indicator_sets": ["options_premium_selector_v1"], "strategies": ["options_premium_selector"]}'::jsonb, '[{"description": "Evaluate options premium context (IV rank + term slope).", "rationale": "High IV favors selling; low IV can favor buying if trend helps.", "api": {"method": "POST", "path": "/indicator_sets/options_premium_selector_v1/evaluate", "body": {"universe": ["SPY"], "timeframe": "daily"}}, "expects": "ok:true and context flags"}]'::jsonb, '["Premium context flags"]'::jsonb, '["Calm, liquid markets"]'::jsonb, '["Earnings/events"]'::jsonb, '["Regimes can flip quickly around events"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/options_premium_selector_v1", "strategy": "/catalog/strategy/options_premium_selector"}'::jsonb, TRUE, 'Check IV rank and term structure to decide if premium is rich or cheap.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('quick_backtest_pipeline_v1', 1, 'published', 'Quick Backtest (10 minutes)', 'Create model → build → backtest → leaderboard via API.', '"Run an end‑to‑end backtest and view results."'::jsonb, 'beginner', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001", "DB configured"]'::jsonb, '{"indicators": [], "indicator_sets": ["momentum_breakout_v1"], "strategies": []}'::jsonb, '[{"description": "Create model scaffold (SPY hourly).", "rationale": "Set up config and policy.", "api": {"method": "POST", "path": "/models", "body": {"ticker": "SPY", "asset_type": "eq", "horizon": "swing", "cadence": "hourly", "algo": "gbm", "pack_id": "zerosigma"}}, "expects": "ok:true with model_id"}, {"description": "Build matrix (Jan–Mar).", "rationale": "Prepare clean dataset.", "api": {"method": "POST", "path": "/build_matrix", "body": {"model_id": "spy_eq_swing_hourly", "pack_id": "zerosigma", "start": "2024-01-01", "end": "2024-03-31", "ticker": "SPY"}}, "expects": "ok:true and out_csv path"}, {"description": "Backtest thresholds.", "rationale": "Measure performance.", "api": {"method": "POST", "path": "/backtest", "body": {"model_id": "spy_eq_swing_hourly", "thresholds": "0.55,0.60,0.65", "splits": 5, "allowed_hours": "13,14,15", "save": true, "tag": "quick"}}, "expects": "ok:true with best_sharpe_hourly"}, {"description": "Open leaderboard.", "rationale": "See ranked runs.", "api": {"method": "GET", "path": "/leaderboard", "query": {"model_id": "spy_eq_swing_hourly", "limit": 10}}, "expects": "rows list"}]'::jsonb, '["Model id", "CSV matrix path", "Backtest run id", "Leaderboard rows"]'::jsonb, '["DB configured and data available"]'::jsonb, '["No API keys"]'::jsonb, NULL, '{"docs": "/docs/PIPELINE_RUNBOOK"}'::jsonb, TRUE, 'Create model → build → backtest → leaderboard via API.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('rsi_oversold_hourly_v1', 1, 'published', 'Find Oversold Stocks (5 minutes)', 'Use RSI to quickly surface oversold names on your watchlist.', '"Get a list of oversold candidates using hourly RSI < 30."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Watchlist or universe preset"]'::jsonb, '{"indicators": ["rsi"], "indicator_sets": [], "strategies": []}'::jsonb, '[{"description": "Choose timeframe (hourly) and threshold (RSI < 30).", "rationale": "Larger intraday bars reduce noise for beginners.", "api": {"method": "POST", "path": "/screen", "body": {"universe": ["SPY", "AAPL"], "condition": {"id": "rsi", "params": {"period": 14}, "op": "<", "value": 30}, "timeframe": "hourly"}}, "expects": "ok:true and matches list"}]'::jsonb, '["List of matches { symbol, ts, value }"]'::jsonb, '["Range-bound markets"]'::jsonb, '["Major news or very low liquidity"]'::jsonb, '["RSI can stay oversold in strong downtrends"]'::jsonb, '{"indicator": "/catalog/indicator/rsi"}'::jsonb, TRUE, 'Screen your watchlist for hourly RSI < 30 to find oversold names.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('trend_follow_alignment_hourly_v1', 1, 'published', 'Trend-Follow Alignment (10 minutes)', 'Go with the daily trend only when the hourly agrees.', '"Check bias and run a simple backtest."'::jsonb, 'beginner', 'beginner', 10, ARRAY[]::text[], '["API at http://localhost:8001", "Hourly and daily data"]'::jsonb, '{"indicators": ["daily_ema", "ema", "ema_slope"], "indicator_sets": ["multi_tf_trend_v1"], "strategies": ["trend_follow_alignment"]}'::jsonb, '[{"description": "Evaluate HTF alignment using set (daily + hourly).", "rationale": "Bias from daily EMA; confirm hourly EMA and slope.", "api": {"method": "POST", "path": "/indicator_sets/multi_tf_trend_v1/evaluate", "body": {"universe": ["SPY"], "timeframe": "hourly"}}, "expects": "ok:true and alignment flags"}, {"description": "Run a quick backtest of the alignment strategy.", "rationale": "Validate idea with simple metrics.", "api": {"method": "POST", "path": "/strategies/trend_follow_alignment/backtest", "body": {"universe": ["SPY"], "timeframe": "hourly", "start": "2024-01-01", "end": "2024-03-31"}}, "expects": "ok:true and summary metrics"}]'::jsonb, '["Bias flags", "Backtest summary"]'::jsonb, '["Clear daily trends"]'::jsonb, '["Choppy daily context"]'::jsonb, '["Entries late after long trends"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/multi_tf_trend_v1", "strategy": "/catalog/strategy/trend_follow_alignment"}'::jsonb, TRUE, 'Trade in the direction of the daily trend only when the hourly agrees.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('vwap_momentum_scalp_5m_v1', 1, 'published', 'VWAP Momentum Scalp (5 minutes)', 'Trade quick bursts near VWAP only in liquid names.', '"Surface scalp candidates near VWAP with momentum/volume support."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Liquid tickers"]'::jsonb, '{"indicators": ["close_vs_vwap", "obv", "vol_zscore", "momentum"], "indicator_sets": ["vwap_distance_obv_v1"], "strategies": ["vwap_momentum_scalp"]}'::jsonb, '[{"description": "Evaluate VWAP+OBV set at 5m to find stretched moves with flow support.", "rationale": "Confirm momentum bursts near VWAP with volume/flow.", "api": {"method": "POST", "path": "/indicator_sets/vwap_distance_obv_v1/evaluate", "body": {"universe": ["SPY", "AAPL"], "timeframe": "5m"}}, "expects": "ok:true and candidates with distance/flow flags"}]'::jsonb, '["Candidates with VWAP distance and OBV flags"]'::jsonb, '["Liquid tickers during RTH"]'::jsonb, '["First 1–3 minutes", "Thin names"]'::jsonb, '["Stops must be tight; throttle entries"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/vwap_distance_obv_v1", "strategy": "/catalog/strategy/vwap_momentum_scalp"}'::jsonb, TRUE, 'Find quick momentum bursts near VWAP with OBV/volume support.') ON CONFLICT (workflow_id, version) DO NOTHING;
INSERT INTO sc.workflows (workflow_id, version, status, title, subtitle, goal, persona, difficulty, time_to_complete, tags, prerequisites, dependencies, steps, outputs, best_when, avoid_when, caveats, links, novice_ready, beginner_summary) VALUES ('zerosigma_0dte_gate_5m_v1', 1, 'published', '0DTE Gate (5 minutes)', 'Only trade when intraday conditions are favorable.', '"Stream gate status with reasons."'::jsonb, 'beginner', 'beginner', 5, ARRAY[]::text[], '["API at http://localhost:8001", "Intraday data"]'::jsonb, '{"indicators": ["momentum", "first15m_range_z", "open_gap_z", "atr"], "indicator_sets": ["zerosigma_0dte_gate"], "strategies": ["zerosigma_0dte_scalp_gate"]}'::jsonb, '[{"description": "Subscribe to gate with 5m timeframe and throttle.", "rationale": "Stream updates; act only when gate=green.", "api": {"method": "WS", "path": "/ws/indicator_sets", "body": {"action": "subscribe", "set_id": "zerosigma_0dte_gate", "universe": ["SPY"], "timeframe": "5m", "throttle_ms": 5000}}, "expects": "match events with gate and reasons"}]'::jsonb, '["Gate status with reasons"]'::jsonb, '["Liquid underlyings during RTH"]'::jsonb, '["Halts, extreme gaps"]'::jsonb, '["This is context; follow strategy policy"]'::jsonb, '{"indicator_set": "/catalog/indicator_set/zerosigma_0dte_gate", "strategy": "/catalog/strategy/zerosigma_0dte_scalp_gate"}'::jsonb, TRUE, 'Use a simple gate to trade 0DTE only when conditions are favorable.') ON CONFLICT (workflow_id, version) DO NOTHING;
COMMIT;
